#include <windows.h>
#include "eva.h"

struct PALENTRY 
{ 
	BYTE Red; 
	BYTE Green; 
	BYTE Blue; 
};

struct msxpal { BYTE RB; BYTE G; };
msxpal pal[16];

PALENTRY SCR8Pal[256]=
{
	{0, 0, 0},
	{0, 0, 84},
	{0, 0, 168},
	{0, 0, 252},
	{36, 0, 0},
	{36, 0, 84},
	{36, 0, 168},
	{36, 0, 252},
	{72, 0, 0},
	{72, 0, 84},
	{72, 0, 168},
	{72, 0, 252},
	{108, 0, 0},
	{108, 0, 84},
	{108, 0, 168},
	{108, 0, 252},
	{144, 0, 0},
	{144, 0, 84},
	{144, 0, 168},
	{144, 0, 252},
	{180, 0, 0},
	{180, 0, 84},
	{180, 0, 168},
	{180, 0, 252},
	{216, 0, 0},
	{216, 0, 84},
	{216, 0, 168},
	{216, 0, 252},
	{252, 0, 0},
	{252, 0, 84},
	{252, 0, 168},
	{252, 0, 252},
	{0, 36, 0},
	{0, 36, 84},
	{0, 36, 168},
	{0, 36, 252},
	{36, 36, 0},
	{36, 36, 84},
	{36, 36, 168},
	{36, 36, 252},
	{72, 36, 0},
	{72, 36, 84},
	{72, 36, 168},
	{72, 36, 252},
	{108, 36, 0},
	{108, 36, 84},
	{108, 36, 168},
	{108, 36, 252},
	{144, 36, 0},
	{144, 36, 84},
	{144, 36, 168},
	{144, 36, 252},
	{180, 36, 0},
	{180, 36, 84},
	{180, 36, 168},
	{180, 36, 252},
	{216, 36, 0},
	{216, 36, 84},
	{216, 36, 168},
	{216, 36, 252},
	{252, 36, 0},
	{252, 36, 84},
	{252, 36, 168},
	{252, 36, 252},
	{0, 72, 0},
	{0, 72, 84},
	{0, 72, 168},
	{0, 72, 252},
	{36, 72, 0},
	{36, 72, 84},
	{36, 72, 168},
	{36, 72, 252},
	{72, 72, 0},
	{72, 72, 84},
	{72, 72, 168},
	{72, 72, 252},
	{108, 72, 0},
	{108, 72, 84},
	{108, 72, 168},
	{108, 72, 252},
	{144, 72, 0},
	{144, 72, 84},
	{144, 72, 168},
	{144, 72, 252},
	{180, 72, 0},
	{180, 72, 84},
	{180, 72, 168},
	{180, 72, 252},
	{216, 72, 0},
	{216, 72, 84},
	{216, 72, 168},
	{216, 72, 252},
	{252, 72, 0},
	{252, 72, 84},
	{252, 72, 168},
	{252, 72, 252},
	{0, 108, 0},
	{0, 108, 84},
	{0, 108, 168},
	{0, 108, 252},
	{36, 108, 0},
	{36, 108, 84},
	{36, 108, 168},
	{36, 108, 252},
	{72, 108, 0},
	{72, 108, 84},
	{72, 108, 168},
	{72, 108, 252},
	{108, 108, 0},
	{108, 108, 84},
	{108, 108, 168},
	{108, 108, 252},
	{144, 108, 0},
	{144, 108, 84},
	{144, 108, 168},
	{144, 108, 252},
	{180, 108, 0},
	{180, 108, 84},
	{180, 108, 168},
	{180, 108, 252},
	{216, 108, 0},
	{216, 108, 84},
	{216, 108, 168},
	{216, 108, 252},
	{252, 108, 0},
	{252, 108, 84},
	{252, 108, 168},
	{252, 108, 252},
	{0, 144, 0},
	{0, 144, 84},
	{0, 144, 168},
	{0, 144, 252},
	{36, 144, 0},
	{36, 144, 84},
	{36, 144, 168},
	{36, 144, 252},
	{72, 144, 0},
	{72, 144, 84},
	{72, 144, 168},
	{72, 144, 252},
	{108, 144, 0},
	{108, 144, 84},
	{108, 144, 168},
	{108, 144, 252},
	{144, 144, 0},
	{144, 144, 84},
	{144, 144, 168},
	{144, 144, 252},
	{180, 144, 0},
	{180, 144, 84},
	{180, 144, 168},
	{180, 144, 252},
	{216, 144, 0},
	{216, 144, 84},
	{216, 144, 168},
	{216, 144, 252},
	{252, 144, 0},
	{252, 144, 84},
	{252, 144, 168},
	{252, 144, 252},
	{0, 180, 0},
	{0, 180, 84},
	{0, 180, 168},
	{0, 180, 252},
	{36, 180, 0},
	{36, 180, 84},
	{36, 180, 168},
	{36, 180, 252},
	{72, 180, 0},
	{72, 180, 84},
	{72, 180, 168},
	{72, 180, 252},
	{108, 180, 0},
	{108, 180, 84},
	{108, 180, 168},
	{108, 180, 252},
	{144, 180, 0},
	{144, 180, 84},
	{144, 180, 168},
	{144, 180, 252},
	{180, 180, 0},
	{180, 180, 84},
	{180, 180, 168},
	{180, 180, 252},
	{216, 180, 0},
	{216, 180, 84},
	{216, 180, 168},
	{216, 180, 252},
	{252, 180, 0},
	{252, 180, 84},
	{252, 180, 168},
	{252, 180, 252},
	{0, 216, 0},
	{0, 216, 84},
	{0, 216, 168},
	{0, 216, 252},
	{36, 216, 0},
	{36, 216, 84},
	{36, 216, 168},
	{36, 216, 252},
	{72, 216, 0},
	{72, 216, 84},
	{72, 216, 168},
	{72, 216, 252},
	{108, 216, 0},
	{108, 216, 84},
	{108, 216, 168},
	{108, 216, 252},
	{144, 216, 0},
	{144, 216, 84},
	{144, 216, 168},
	{144, 216, 252},
	{180, 216, 0},
	{180, 216, 84},
	{180, 216, 168},
	{180, 216, 252},
	{216, 216, 0},
	{216, 216, 84},
	{216, 216, 168},
	{216, 216, 252},
	{252, 216, 0},
	{252, 216, 84},
	{252, 216, 168},
	{252, 216, 252},
	{0, 252, 0},
	{0, 252, 84},
	{0, 252, 168},
	{0, 252, 252},
	{36, 252, 0},
	{36, 252, 84},
	{36, 252, 168},
	{36, 252, 252},
	{72, 252, 0},
	{72, 252, 84},
	{72, 252, 168},
	{72, 252, 252},
	{108, 252, 0},
	{108, 252, 84},
	{108, 252, 168},
	{108, 252, 252},
	{144, 252, 0},
	{144, 252, 84},
	{144, 252, 168},
	{144, 252, 252},
	{180, 252, 0},
	{180, 252, 84},
	{180, 252, 168},
	{180, 252, 252},
	{216, 252, 0},
	{216, 252, 84},
	{216, 252, 168},
	{216, 252, 252},
	{252, 252, 0},
	{252, 252, 84},
	{252, 252, 168},
	{252, 252, 252}
};


DWORD YJK24(int y, int j, int k)
{
	int		r,g,b;

	if(j & 0x20) j|=~0x1f;
	if(k & 0x20) k|=~0x1f;

	r = y + j;
	if(r < 0) r = 0;
	if(r > 31) r = 31;

	g = y + k;
	if(g < 0) g = 0;
	if(g > 31) g = 31;

	b = y * 5 / 4 - j / 2 - k / 4;
	if(b < 0) b = 0;
	if(b > 31) b = 31;

	r = (r << 3) | (r >> 2);
	g = (g << 3) | (g >> 2);
	b = (b << 3) | (b >> 2);

	return (DWORD)((b | (g << 8) | (r << 16)) & 0xFFFFFF);
}

void SetPal(int color, BYTE RB, BYTE G)
{
	pal[color].RB = RB;
	pal[color].G = G;
}

BOOL DecodeYJK32(LPVOID lpDst, LPVOID lpSrc)
{
	int		u,v;
	int		y0,y1,y2,y3,j,k;
	LPBYTE	lpbSrc = (LPBYTE)lpSrc;
	LPDWORD	lpdwDst = (LPDWORD)lpDst + 128*(106-1);

	for(v = 0; v < 106; v++){
		for(u = 0; u < 128/4; u++){
			y0 = (int)*lpbSrc++ & 255;
			y1 = (int)*lpbSrc++ & 255;
			y2 = (int)*lpbSrc++ & 255;
			y3 = (int)*lpbSrc++ & 255;
			k = (y0 & 7) | ((y1 & 7) << 3);
			j = (y2 & 7) | ((y3 & 7) << 3);
			y0 >>= 3;
			y1 >>= 3;
			y2 >>= 3;
			y3 >>= 3;
			*lpdwDst++ = YJK24(y0,j,k);
			*lpdwDst++ = YJK24(y1,j,k);
			*lpdwDst++ = YJK24(y2,j,k);
			*lpdwDst++ = YJK24(y3,j,k);
		}
		lpdwDst -= 128*2;
	}
	return TRUE;
}

BOOL Decode256(LPVOID lpDst, LPVOID lpSrc)
{
	int		u,v;
	int		color;
	//int		y0,y1,y2,y3,j,k;
	LPBYTE	lpbSrc = (LPBYTE)lpSrc;
	LPDWORD	lpdwDst = (LPDWORD)lpDst + 128*(106-1);

	for(v = 0; v < 106; v++){
		for(u = 0; u < 128; u++){
			color = (int)*lpbSrc++ & 255;
			*lpdwDst++ = (DWORD)((SCR8Pal[color].Blue | (SCR8Pal[color].Green << 8) | (SCR8Pal[color].Red << 16)) & 0xFFFFFF);
		}
		lpdwDst -= 128*2;
	}
	return TRUE;
}

BOOL Decode16(LPVOID lpDst, LPVOID lpSrc)
{
	int		u,v;
	int		color;
	int 	cr, cg, cb;

	//int		y0,y1,y2,y3,j,k;
	LPBYTE	lpbSrc = (LPBYTE)lpSrc;
	LPDWORD	lpdwDst = (LPDWORD)lpDst + 128*(106-1);

	for(v = 0; v < 106; v++){
		for(u = 0; u < 128; u++){
			color = (int)*lpbSrc++; 
			color = color & 0x0F;

			cr = (int)(((pal[color].RB >> 4) & 0X07)  * 36.42);
			cb = (int)((pal[color].RB & 0x07) * 36.42);
			cg = (int)((pal[color].G  & 0x07) * 36.42);

			if (cr>255) cr=255;
			if (cb>255) cb=255;
			if (cg>255) cg=255;

			*lpdwDst++ = (DWORD)((cb | (cg << 8) | (cr << 16)) & 0xFFFFFF);
		}
		lpdwDst -= 128*2;
	}
	return TRUE;
}
